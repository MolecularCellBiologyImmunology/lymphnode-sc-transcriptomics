# Snakemake Workflow for Module 3: Mapping the reads into barcodes

# Include common settings
include: "../common.snakefile"

##### featureCount settings #####
# extra options
extrafc = ' '.join(config['params']['featureCounts'])

##### functions producing input #####
def get_fastq(wildcards):
    seqbase = str(data / config['sequences'])
    path = seqbase + "{fileprefix}{filesuffix}".format(filesuffix=config['filesuffix']['codecount'][0], **wildcards)
    return path

##### target rules #####
# pseudorule consuming ALL the final output
# rule all:
#     input:
#         expand("{tmpstore}/mapping/{fileprefix}/{fileprefix}.txt",
#                fileprefix=samples['fileprefix'], tmpstore=tmpstore)

rule all:
    input:
        expand(['{tmpstore}/mapping/{fileprefix}/counts.tsv',
                '{tmpstore}/mapping/{fileprefix}/report.html',
                '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.bam',
                '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.barcoded.bam'], reference = reference,
               fileprefix=samples['fileprefix'], tmpstore=tmpstore)

# convert bam files to sam format using samtools
rule bamtosam:
    input:
        tmpstore + '/star_align/' + '{reference}/{fileprefix}/Aligned.out.bam'
    output:
        '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.out.sam'
    shell:
        'samtools view -h {input} -o {output}'

# add cell and umi barcodes in the samfile
rule addbc:
    input:
        samfile = '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.out.sam',
        fastqfile = get_fastq
    output:
        '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.barcoded.sam'
    script:
        'scripts/add_barcodes.py'

# convert sam files with barcodes to bam format again
rule barcoded_samtobam:
    input:
        '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.barcoded.sam'
    output:
        '{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.barcoded.bam'
    shell:
        'samtools view -b -o {output} {input}'

# run featureCounts (from the Subread package)
rule map_barcoded:
    input:
        bamfile = expand('{tmpstore}/star_align/{reference}/{fileprefix}/Aligned.barcoded.bam',reference = reference,
               fileprefix=samples['fileprefix'], tmpstore=tmpstore),
        gtffile = gtffile
    output:
        '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam',
        '{tmpstore}/mapping/{fileprefix}/{fileprefix}.txt',
        '{tmpstore}/mapping/{fileprefix}/{fileprefix}.txt.summary'
    shell: 
        'featureCounts -a {input[gtffile]} -R SAM -o {output[1]} {extrafc} {input[bamfile]}'

# convert the featureCounts sam file to bam format
rule featurecount_samtobam:
    input:
        '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam',
    output:
        '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.bam'
    shell:
        'samtools view -b -o {output} {input}'

# filter high-quality mapping reads using samtools
rule filterhq:
    input:
        '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam'
    output:
        temporary('{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.hqfiltered.sam')
    shell:
        'samtools view -q 255 {input} -o {output}'

# generate a tsv table of high-quality mapping reads using a custom python script
rule tablehq:
    input:
        '{tmpstore}/mapping/{fileprefix}/Aligned.barcoded.bam.featureCounts.hqfiltered.sam'
    output:
        '{tmpstore}/mapping/{fileprefix}/HqFeatureCounts.tsv'
    script:
        'scripts/generate_featureCounts_table.py'

# generate a tsv table of unique umi's per gene and true cell barcode using a custom R script
# TODO: This sometimes fails when running parallel jobs:
    # RuleException:
    # CalledProcessError in line 104 of /home/douwe/single-cell-fastqc/workflows/map_barcodes/Snakefile:
    # Command ' set -euo pipefail;  Rscript /home/douwe/single-cell-fastqc/workflows/map_barcodes/.snakemake/scripts/tmpk4ti7o3z.render_reports.R ' returned non_zero exit status 1.
    #   File "/home/douwe/single_cell_fastqc/workflows/map-barcodes/Snakefile", line 104, in __rule_simplecounts
    #   File "/home/douwe/anaconda3/envs/scRNA/lib/python3.6/concurrent/futures/thread.py", line 56, in run

rule simplecounts:
    input:
        featuretable='{tmpstore}/mapping/{fileprefix}/HqFeatureCounts.tsv',
        cellbcfile=cellbcfile
    output:
        countsfile='{tmpstore}/mapping/{fileprefix}/counts.tsv',
        report='{tmpstore}/mapping/{fileprefix}/report.html'
    params:
        outputdir='{tmpstore}/mapping/{fileprefix}',
        outputfile='report.html'
    script:
        'scripts/render_reports.R'
