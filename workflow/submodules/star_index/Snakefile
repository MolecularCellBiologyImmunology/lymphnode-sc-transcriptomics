# Snakemake Workflow for Module 1: Generating STAR index files of a reference 
# sequence

# Include common settings
include: "../../common.snakefile"

# STAR extra options
extra = ' '.join(config['params']['starindex'][config['annotationformat']])

# Expected index files from STAR
indexfiles = ['SA','SAindex','chrLength.txt','chrName.txt','chrNameLength.txt']

# ##### Target Rules #####
# Consuming all the final output and cleaning up decompressed file
rule all:
    input:
        expand('{indexdir}/{reference}/{indexfiles}',
            indexdir = config['indexdir'],
            reference = config['reference'],
            fastafile = config['fastafile'],
            indexfiles = indexfiles
        )

# Unpacking the compressed reference fasta file
rule decompress:
    input: "{genomedir}/{reference}/{fastafile}.gz"
    output: temporary("{genomedir}/{reference}/{fastafile}")
    shell: "unpigz -k -c {input} > {output}"

# Rule for Module 1: The genome indexation by STAR
rule index:
    input: 
        fasta = expand("{genomedir}/{{reference}}/{fastafile}", 
            fastafile = config['fastafile'],
            genomedir = config['genomedir']),
        gtf = expand("{genomedir}/{{reference}}/{gtffile}",
            gtffile = config['gtffile'],
            genomedir = config['genomedir'])
    output:
        expand("{{indexdir}}/{{reference}}/{indexfiles}", indexfiles = indexfiles)
    params: targetindex = "{indexdir}/{reference}"
    threads: 8
    shell: 'STAR --runThreadN 8 --runMode genomeGenerate --genomeDir {params.targetindex} --genomeFastaFiles {input.fasta} --sjdbGTFfile {input.gtf} {extra}' # {threads}
