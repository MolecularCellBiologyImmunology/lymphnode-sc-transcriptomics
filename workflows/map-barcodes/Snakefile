# Snakemake Workflow for Module 3: Mapping the reads into barcodes

# Include common settings
include: "../common.snakefile"

##### featureCount settings #####
# extra options
extrafc = ' '.join(config['params']['featureCounts'])

##### target rules #####
# pseudorule consuming ALL the final output
rule all:
    input:
        expand(['{tmppath}/mapping/{reference}/{fileprefix}/counts.tsv',
                '{tmppath}/mapping/{reference}/{fileprefix}/report.html',
                '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.bam'
                ],
                reference = config['reference'],
                fileprefix = samples['fileprefix'],
                tmppath = config['tmppath'])

# convert bam files to sam format using samtools
rule bamtosam:
    input:
        '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.out.bam'
    output:
        '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.out.sam'
    shell:
        'samtools view -h {input} -o {output}'

# add cell and umi barcodes in the samfile
rule addbc:
    input:
        samfile = '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.out.sam',
        fastqfile = expand('{seqdir}/{{fileprefix}}{filesuffix}', 
            seqdir = config['seqdir'], 
            filesuffix = config['filesuffix']['codecount'][0]
        )
    output:
        '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.barcoded.sam'
    script:
        'scripts/add_barcodes.py'

# convert sam files with barcodes to bam format again
rule barcoded_samtobam:
    input:
        '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.barcoded.sam'
    output:
        '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.barcoded.bam'
    shell:
        'samtools view -b -o {output} {input}'

# run featureCounts (from the Subread package)
rule map_barcoded:
    input:
        bamfile = '{tmppath}/star-align/{reference}/{fileprefix}/Aligned.barcoded.bam',
        gtffile = expand("{genomedir}/{{reference}}/{gtffile}",
            gtffile = config['gtffile'],
            genomedir = config['genomedir'])
    output:
        '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam',
        '{tmppath}/mapping/{reference}/{fileprefix}/{fileprefix}.txt',
        '{tmppath}/mapping/{reference}/{fileprefix}/{fileprefix}.txt.summary'
    shell: 
        'featureCounts -a {input.gtffile} -R SAM -o {output[1]} {extrafc} {input.bamfile}'

# convert the featureCounts sam file to bam format
rule featurecount_samtobam:
    input:
        '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam',
    output:
        '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.bam'
    shell:
        'samtools view -b -o {output} {input}'

# filter high-quality mapping reads using samtools
rule filterhq:
    input:
        '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.sam'
    output:
        temporary('{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.hqfiltered.sam')
    shell:
        'samtools view -q 255 {input} -o {output}'

# generate a tsv table of high-quality mapping reads using a custom python 
# script.
# TODO: should quality filter be adaptible from the configuration file by 
# setting the quality parameter there?
rule tablehq:
    input:
        '{tmppath}/mapping/{reference}/{fileprefix}/Aligned.barcoded.bam.featureCounts.hqfiltered.sam'
    output:
        '{tmppath}/mapping/{reference}/{fileprefix}/HqFeatureCounts.tsv'
    script:
        'scripts/generate_featureCounts_table.py'

# generate a tsv table of unique umi's per gene and true cell barcode using a 
# custom R script
# TODO: This sometimes fails when running parallel jobs:

rule simplecounts:
    input:
        featuretable = '{tmppath}/mapping/{reference}/{fileprefix}/HqFeatureCounts.tsv',
        cellbcfile = config['cellbcfile']
    output:
        countsfile='{tmppath}/mapping/{reference}/{fileprefix}/counts.tsv',
        report='{tmppath}/mapping/{reference}/{fileprefix}/report.html'
    params:
        outputdir='{tmppath}/mapping/{reference}/{fileprefix}',
        outputfile='report.html',
        UMIcardinality=config['UMIcardinality'],
        UMIcorrection=config['UMIcorrection']
    script:
        'scripts/render_reports.R'
