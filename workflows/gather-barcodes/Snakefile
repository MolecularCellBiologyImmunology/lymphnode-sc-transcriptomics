import pandas as pd
from snakemake.utils import min_version
# from snakemake.shell import shell
import pathlib

##### set minimum snakemake version #####
min_version("5.2.4")

##### load config and annotations #####

configfile: "../../config.yaml"

##### data path #####
data = pathlib.Path(config['data'])

##### annotations #####
# file with sample annotations
annotationfile = data / config['samples']
samples = pd.read_table(annotationfile).set_index('fileprefix', drop=False)
if config['istest']:
    samples = samples.loc[config['testset']]

# file with reference genome annotations
referencefile = data / config['references']
references = pd.read_table(referencefile).set_index('reference', drop=False)

# other paths
# temporary storage of large files
tmpstore = str(data / config['tmpstore'])

# file with known cell barcodes
celbcfile = str(data / config['celbc'])

##### functions producing input #####
def get_fastq(wildcards):
    seqbase = data / config['sequences']
    path = str(seqbase / "{fileprefix}{filesuffix}".format( 
                filesuffix=config['filesuffix']['codecount'][0], **wildcards))
    return path

##### target rules #####
# pseudorule consuming ALL the final output
rule all:
    input:
        expand("{tmpstore}/codecounts-cell/{fileprefix}.txt.gz",
               fileprefix=samples['fileprefix'], tmpstore=tmpstore),
        "{tmpstore}/codecounts-all/alcounts.txt".format(tmpstore=tmpstore)

# extract the barcodes
rule extract_barcodes:
    input:
        get_fastq,
        celbcfile
    output:
        temporary("{tmpstore}/codecounts-all/{fileprefix}.txt"), 
        "{tmpstore}/codecounts-cell/{fileprefix}.txt" 
    script: 'scripts/count_barcodes.py'

# zip the cell counts
rule zip:
    input:
        "{tmpstore}/codecounts-cell/{fileprefix}.txt" 
    output:
        "{tmpstore}/codecounts-cell/{fileprefix}.txt.gz"
    shell:
        "pigz -p {threads} {input}"

# compile the all-counts files into a single file
rule compile:
    input:
        expand("{tmpstore}/codecounts-all/{fileprefix}.txt",
            fileprefix=samples['fileprefix'], tmpstore=config['tmpstore'])
    output:
        "{tmpstore}/codecounts-all/alcounts.txt".format(tmpstore=config['tmpstore'])
    shell: 
        "echo 'fileprefix,celbc,umi,reads' > {output} && cat {input} >> {output}"
